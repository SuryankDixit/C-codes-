#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>   
#include<unistd.h>

sem_t mutex;
int x=0;

void* thread(void* arg)
{
 printf("thread id = %d created\n", pthread_self());
sem_wait(&mutex);
printf("ID %d Entering in critical section :\n",pthread_self());
//Critical Section 
x++;
sleep(4);
printf("ID %d Exiting from critical section :\n",pthread_self());
sem_post(&mutex);
printf("Value of x : %d\n",x);
sem_destroy(&mutex);
printf("thread id = %d destroyed\n", pthread_self());
}

int main()
{
sem_init(&mutex,0,1);
pthread_t t1,t2;
pthread_create(&t1,NULL,thread,NULL);

pthread_create(&t2,NULL,thread,NULL);

pthread_join(t1,NULL);
pthread_join(t2,NULL);
sem_destroy(&mutex);
return 0;
}
